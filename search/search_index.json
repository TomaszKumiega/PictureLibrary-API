{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About project Description Picture Library API is part of PictureLibrary project, built for storing and cataloging pictures and images. Status API is still very much in developement","title":"About project"},{"location":"#about-project","text":"","title":"About project"},{"location":"#description","text":"Picture Library API is part of PictureLibrary project, built for storing and cataloging pictures and images.","title":"Description"},{"location":"#status","text":"API is still very much in developement","title":"Status"},{"location":"data_model/","text":"Data Model User User is the owner of library. Diffrent users can have their own libraries on the same device. One library can have multiple owners. API uses Authentication . Properties Name Type Notes Id Guid User Id Username string - Email string - Library Library represents .xml file that contains tags and images. Xml file structure <?xml version=\"1.0\" encoding=\"UTF-8\"?> <library name = \"libraryName\" description = \"Family picture library\" owners = \"userGuid,userGuid\" > <tags> <tag name = \"Portraits\" description = \"\" /> <tag name = \"Vacation\" description = \"All pictures from vacation time\" /> </tags> <images> <imageFile name = \"1642252321\" extension = \"jpg\" source = \"C:/Pictures/Library1/images/1642252321.jpg\" creationTime = \"2008-10-01T17:04:32.0000000\" lastAccessTime = \"2008-10-01T17:04:32.0000000\" lastWriteTime = \"2008-10-01T17:04:32.0000000\" size = \"5130500\" /> <imageFile name = \"1246531451\" extension = \"png\" source = \"C:/Pictures/Library1/images/1246531451.png\" creationTime = \"2008-10-01T17:04:32.0000000\" lastAccessTime = \"2008-10-01T17:04:32.0000000\" lastWriteTime = \"2008-10-01T17:04:32.0000000\" size = \"3003000\" /> <imageFile name = \"1513515311\" extension = \"jpg\" source = \"C:/Pictures/Library1/images/1513515311.jpg\" creationTime = \"2008-10-01T17:04:32.0000000\" lastAccessTime = \"2008-10-01T17:04:32.0000000\" lastWriteTime = \"2008-10-01T17:04:32.0000000\" size = \"2050000\" /> </images> </library> Properties Name Type Notes Name string Name of the library FullPath string Full path to the library Description string - Tags List of Tags List of all tags used in the library Images List of ImageFiles List of all files in the library Owners List of Users Owners of the library Tag Tags are used for image organization. All tags existing in a library are stored in library xml file. Every image is assigned at least one tag. Properties Name Type Notes Name string - Description string - ImageFile ImageFile describes an image and provides a way to access a file from the remote storage. One image can be stored in multiple albums without multiplication of its file but every library has it's own copy of the image. Properties Name Type Notes Name string Name of the image file without extension Extension string File extension (jpg, png etc.) Source string Path of the file CreationTime DateTime The time of file creation LastAccessTime DateTime The time file was last accessed LastWriteTime DateTime The time file was last written to Size long Size of the file in bytes","title":"Data Model"},{"location":"data_model/#data-model","text":"","title":"Data Model"},{"location":"data_model/#user","text":"User is the owner of library. Diffrent users can have their own libraries on the same device. One library can have multiple owners. API uses Authentication . Properties Name Type Notes Id Guid User Id Username string - Email string -","title":"User"},{"location":"data_model/#library","text":"Library represents .xml file that contains tags and images. Xml file structure <?xml version=\"1.0\" encoding=\"UTF-8\"?> <library name = \"libraryName\" description = \"Family picture library\" owners = \"userGuid,userGuid\" > <tags> <tag name = \"Portraits\" description = \"\" /> <tag name = \"Vacation\" description = \"All pictures from vacation time\" /> </tags> <images> <imageFile name = \"1642252321\" extension = \"jpg\" source = \"C:/Pictures/Library1/images/1642252321.jpg\" creationTime = \"2008-10-01T17:04:32.0000000\" lastAccessTime = \"2008-10-01T17:04:32.0000000\" lastWriteTime = \"2008-10-01T17:04:32.0000000\" size = \"5130500\" /> <imageFile name = \"1246531451\" extension = \"png\" source = \"C:/Pictures/Library1/images/1246531451.png\" creationTime = \"2008-10-01T17:04:32.0000000\" lastAccessTime = \"2008-10-01T17:04:32.0000000\" lastWriteTime = \"2008-10-01T17:04:32.0000000\" size = \"3003000\" /> <imageFile name = \"1513515311\" extension = \"jpg\" source = \"C:/Pictures/Library1/images/1513515311.jpg\" creationTime = \"2008-10-01T17:04:32.0000000\" lastAccessTime = \"2008-10-01T17:04:32.0000000\" lastWriteTime = \"2008-10-01T17:04:32.0000000\" size = \"2050000\" /> </images> </library> Properties Name Type Notes Name string Name of the library FullPath string Full path to the library Description string - Tags List of Tags List of all tags used in the library Images List of ImageFiles List of all files in the library Owners List of Users Owners of the library","title":"Library"},{"location":"data_model/#tag","text":"Tags are used for image organization. All tags existing in a library are stored in library xml file. Every image is assigned at least one tag. Properties Name Type Notes Name string - Description string -","title":"Tag"},{"location":"data_model/#imagefile","text":"ImageFile describes an image and provides a way to access a file from the remote storage. One image can be stored in multiple albums without multiplication of its file but every library has it's own copy of the image. Properties Name Type Notes Name string Name of the image file without extension Extension string File extension (jpg, png etc.) Source string Path of the file CreationTime DateTime The time of file creation LastAccessTime DateTime The time file was last accessed LastWriteTime DateTime The time file was last written to Size long Size of the file in bytes","title":"ImageFile"},{"location":"endpoints/","text":"Endpoints Authenticate Endpoint POST /users/authenticate Content { \"username\" : \"user\" , \"password\" : \"password123\" } Result HTTP / 1.1 200 OK { \"id\" : \"33df9fba-1a02-45c7-afa4-886b6c751e15\" , \"username\" : \"user\" , \"token\" : \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9. eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2MDcwOTM2NDUsImV4 cCI6MTYzODYyOTY0NSwiYXVkIjoid3d3LmV4YW1wbGUuY29tIiwic3ViIjoianJvY2t ldEBleGFtcGxlLmNvbSIsIkdpdmVuTmFtZSI6IkpvaG5ueSIsIlN1cm5hbWUiOiJSb2Nr ZXQiLCJFbWFpbCI6Impyb2NrZXRAZXhhbXBsZS5jb20iLCJSb2xlIjpbIk1hbmFnZXIiLCJQ cm9qZWN0IEFkbWluaXN0cmF0b3IiXX0.KF1oNcLQ2rcovBWOapa2mh-oIGtmskT5NirenRckLjc\" } Register Endpoint POST /users/register Content { \"username\" : \"user\" , \"firstName\" : \"name\" , \"lastName\" : \"surname\" , \"email\" : \"email@example.com\" , \"password\" : \"password123\" } Response HTTP / 1.1 201 Created { \"id\" : \"33df9fba-1a02-45c7-afa4-886b6c751e15\" , \"username\" : \"user\" , \"firstName\" : \"name\" , \"lastName\" : \"surname\" , \"email\" : \"email@example.com\" } Get all Libraries Endpoint GET /libraries Response HTTP / 1.1 200 OK [ TODO ] Get Library Endpoint GET /libraries/{name} Response HTTP / 1.1 200 OK { TODO } Add Library Endpoint POST /libraries Content { TODO } Response HTTP / 1.1 201 Created { TODO } Update Library Endpoint PUT /libraries/{name} Content { TODO } Response HTTP / 1.1 204 No Content Remove Library Endpoint DELETE /libraries/{name} Response HTTP / 1.1 200 OK { TODO } Get Images From Library Endpoint GET /images/all/{libraryName} Response HTTP / 1.1 200 OK { TODO } Get Specific Image Endpoint GET /images/{imageSource} Response HTTP / 1.1 200 OK { TODO } Add Image Endpoint POST /images/{libraryName} Content { TODO } Response HTTP / 1.1 201 Created { TODO } Update image Endpoint PUT /images/{imageSource} Content { TODO } Response HTTP / 1.1 204 No Content Remove image Endpoint DELETE /images/{imageSource} Response HTTP / 1.1 200 OK { TODO }","title":"Endpoints"},{"location":"endpoints/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/#authenticate","text":"Endpoint POST /users/authenticate Content { \"username\" : \"user\" , \"password\" : \"password123\" } Result HTTP / 1.1 200 OK { \"id\" : \"33df9fba-1a02-45c7-afa4-886b6c751e15\" , \"username\" : \"user\" , \"token\" : \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9. eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2MDcwOTM2NDUsImV4 cCI6MTYzODYyOTY0NSwiYXVkIjoid3d3LmV4YW1wbGUuY29tIiwic3ViIjoianJvY2t ldEBleGFtcGxlLmNvbSIsIkdpdmVuTmFtZSI6IkpvaG5ueSIsIlN1cm5hbWUiOiJSb2Nr ZXQiLCJFbWFpbCI6Impyb2NrZXRAZXhhbXBsZS5jb20iLCJSb2xlIjpbIk1hbmFnZXIiLCJQ cm9qZWN0IEFkbWluaXN0cmF0b3IiXX0.KF1oNcLQ2rcovBWOapa2mh-oIGtmskT5NirenRckLjc\" }","title":"Authenticate"},{"location":"endpoints/#register","text":"Endpoint POST /users/register Content { \"username\" : \"user\" , \"firstName\" : \"name\" , \"lastName\" : \"surname\" , \"email\" : \"email@example.com\" , \"password\" : \"password123\" } Response HTTP / 1.1 201 Created { \"id\" : \"33df9fba-1a02-45c7-afa4-886b6c751e15\" , \"username\" : \"user\" , \"firstName\" : \"name\" , \"lastName\" : \"surname\" , \"email\" : \"email@example.com\" }","title":"Register"},{"location":"endpoints/#get-all-libraries","text":"Endpoint GET /libraries Response HTTP / 1.1 200 OK [ TODO ]","title":"Get all Libraries"},{"location":"endpoints/#get-library","text":"Endpoint GET /libraries/{name} Response HTTP / 1.1 200 OK { TODO }","title":"Get Library"},{"location":"endpoints/#add-library","text":"Endpoint POST /libraries Content { TODO } Response HTTP / 1.1 201 Created { TODO }","title":"Add Library"},{"location":"endpoints/#update-library","text":"Endpoint PUT /libraries/{name} Content { TODO } Response HTTP / 1.1 204 No Content","title":"Update Library"},{"location":"endpoints/#remove-library","text":"Endpoint DELETE /libraries/{name} Response HTTP / 1.1 200 OK { TODO }","title":"Remove Library"},{"location":"endpoints/#get-images-from-library","text":"Endpoint GET /images/all/{libraryName} Response HTTP / 1.1 200 OK { TODO }","title":"Get Images From Library"},{"location":"endpoints/#get-specific-image","text":"Endpoint GET /images/{imageSource} Response HTTP / 1.1 200 OK { TODO }","title":"Get Specific Image"},{"location":"endpoints/#add-image","text":"Endpoint POST /images/{libraryName} Content { TODO } Response HTTP / 1.1 201 Created { TODO }","title":"Add Image"},{"location":"endpoints/#update-image","text":"Endpoint PUT /images/{imageSource} Content { TODO } Response HTTP / 1.1 204 No Content","title":"Update image"},{"location":"endpoints/#remove-image","text":"Endpoint DELETE /images/{imageSource} Response HTTP / 1.1 200 OK { TODO }","title":"Remove image"},{"location":"how_to_run/","text":"Running Picture Library API 1. Install Docker 2. Run the container using terminal on linux or powershell on windows Mounting storage When running the container, you need to specify which directories will be used to store data by using --mount syntax. To specify a directory on host device, where data will be stored, change the source parameter value: --mount type = bind,source = MY_DIRECTORY/,target = Directory1 Using multiple directories and drives for storage When you need to use multiple directories, for example when you want to use multiple drives, use --mount syntax multiple times. With every new directory, change the number of the target directory as follows: Directory1 Directory2 Directory3 ... --mount type = bind,source = MY_DIRECTORY/,target = Directory1 --mount type = bind,source = MY_OTHER_DIRECTORY/,target = Directory2 WARNING It's important to name target directories by following this convention, because application uses this naming scheme to recognize where it's supposed to store data. Recovery drives To setup recovery drives, use --mount syntax the same way as for other drives and change target directory name to RecoveryDirectory: --mount type = bind,source = MY_RECOVERY_DRIVE/,target = RecoveryDirectory1 Recovery drives will mirror the data stored on storage directories. Run the container Run the container by using this command and modifying CONTAINER_NAME and --mount syntax as shown above: docker run -d -it -p 5000 :5000 -p 5001 :5001 --name CONTAINER_NAME --mount type = bind,source = DIRECTORY,target = Directory1/ docker.pkg.github.com/tomaszkumiega/picturelibrary-api/picturelibrary-api:master","title":"Running Picture Library API"},{"location":"how_to_run/#running-picture-library-api","text":"","title":"Running Picture Library API"},{"location":"how_to_run/#1-install-docker","text":"","title":"1. Install Docker"},{"location":"how_to_run/#2-run-the-container-using-terminal-on-linux-or-powershell-on-windows","text":"","title":"2. Run the container using terminal on linux or powershell on windows"},{"location":"how_to_run/#mounting-storage","text":"When running the container, you need to specify which directories will be used to store data by using --mount syntax. To specify a directory on host device, where data will be stored, change the source parameter value: --mount type = bind,source = MY_DIRECTORY/,target = Directory1","title":"Mounting storage"},{"location":"how_to_run/#using-multiple-directories-and-drives-for-storage","text":"When you need to use multiple directories, for example when you want to use multiple drives, use --mount syntax multiple times. With every new directory, change the number of the target directory as follows: Directory1 Directory2 Directory3 ... --mount type = bind,source = MY_DIRECTORY/,target = Directory1 --mount type = bind,source = MY_OTHER_DIRECTORY/,target = Directory2 WARNING It's important to name target directories by following this convention, because application uses this naming scheme to recognize where it's supposed to store data.","title":"Using multiple directories and drives for storage"},{"location":"how_to_run/#recovery-drives","text":"To setup recovery drives, use --mount syntax the same way as for other drives and change target directory name to RecoveryDirectory: --mount type = bind,source = MY_RECOVERY_DRIVE/,target = RecoveryDirectory1 Recovery drives will mirror the data stored on storage directories.","title":"Recovery drives"},{"location":"how_to_run/#run-the-container","text":"Run the container by using this command and modifying CONTAINER_NAME and --mount syntax as shown above: docker run -d -it -p 5000 :5000 -p 5001 :5001 --name CONTAINER_NAME --mount type = bind,source = DIRECTORY,target = Directory1/ docker.pkg.github.com/tomaszkumiega/picturelibrary-api/picturelibrary-api:master","title":"Run the container"},{"location":"project_structure/","text":"Project Structure","title":"Project Structure"},{"location":"project_structure/#project-structure","text":"","title":"Project Structure"}]}